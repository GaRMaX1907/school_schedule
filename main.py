from logic import DB_Manager
from config import *
from telebot import TeleBot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telebot import types

bot = TeleBot(token)
hideBoard = types.ReplyKeyboardRemove() 

cancel_button = "–û—Ç–º–µ–Ω–∞ üö´"
def cansel(message):
    bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π - /info", reply_markup=hideBoard)
  
def no_schedules(message):
    bot.send_message(message.chat.id, '–ë–æ—Ç –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –∏–º–µ–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è')

def gen_inline_markup(rows):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    for row in rows:
        markup.add(InlineKeyboardButton(row, callback_data=row))
    return markup

def gen_markup(rows):
    markup = ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.row_width = 1
    for row in rows:
        markup.add(KeyboardButton(row))
        markup.add(KeyboardButton(cancel_button))
    return markup

attributes_of_schedules = {'–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è' : ["–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", "schedule_name"],
                          "–û–ø–∏—Å–∞–Ω–∏–µ" : ["–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ", "description"],
                          "–§–æ—Ç–æ" : ["–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ", "image"],
                          "–°—Ç–∞—Ç—É—Å" : ["–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", "status_id"]}

def info_schedule(message, schedule_name):
    info = manager.get_schedule_info(schedule_name)[0]
    groups = manager.get_schedule_groups(schedule_name)
    if not groups:
        groups = '–ì—Ä—É–ø–ø–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞'
    bot.send_message(message.chat.id, f"""Schedule name: {info[0]}
Description: {info[1]}
Link: {info[2]}
Status: {info[3]}
Groups: {groups}
""")

@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, """–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
–ü–æ–º–æ–≥—É —Ç–µ–±–µ –≤—Å–ø–æ–º–Ω–∏—Ç—å, –∫–∞–∫–∏–µ –ø—Ä–¥–º–µ—Ç—ã –Ω—É–∂–Ω–æ –≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞! –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã - –≤–≤–µ–¥–∏—Ç–µ /info
""")
    info(message)
    
@bot.message_handler(commands=['info'])
def info(message):
    bot.send_message(message.chat.id,
"""–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –Ω—ë–º. –î–ª—è —ç—Ç–æ–≥–æ –≤–∞–º –ø–æ–º–æ–≥—É—Ç –∫–æ–º–∞–Ω–¥—ã:
    """)
    
@bot.message_handler(commands=['/new_group', ])
def groups(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑—ã–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã")
    bot.register_next_step_handler(message, name_group)

def name_group(message):
    name = message.text
    groups = [([name])]
    bot.send_message(message.chat.id, "–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")

@bot.message_handler(commands=['new_schedule'])
def addtask_command(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑—ã–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    bot.register_next_step_handler(message, name_schedule)

def name_schedule(message):
    name = message.text
    data = [name]
    bot.send_message(message.chat.id, "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    bot.register_next_step_handler(message, image_schedule, data=data)

def image_schedule(message, data):
    data.append(message.img)
    statuses = [x[0] for x in manager.get_statuses()] 
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", reply_markup=gen_markup(statuses))
    bot.register_next_step_handler(message, callback_schedule, data=data, statuses=statuses)

def callback_schedule(message, data, statuses):
    status = message.text
    if message.text == cancel_button:
        cansel(message)
        return
    if status not in statuses:
        bot.send_message(message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!)", reply_markup=gen_markup(statuses))
        bot.register_next_step_handler(message, callback_schedule, data=data, statuses=statuses)
        return
    status_id = manager.get_status_id(status)
    data.append(status_id)
    manager.insert_schedule([tuple(data)])
    bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")


@bot.message_handler(commands=['groups'])
def group_handler(message):
    schedules = manager.get_schedules
    if schedules:
        schedules = [x[2] for x in schedules]
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –≥—Ä—É–ø–ø—É', reply_markup=gen_markup(schedules))
        bot.register_next_step_handler(message, group_schedule, schedules=schedules)
    else:
        no_schedules(message)


def group_schedule(message, schedules):
    schedule_name = message.text
    if message.text == cancel_button:
        cansel(message)
        return
        
    if schedule_name not in schedules:
        bot.send_message(message.chat.id, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–∞–∫–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç', reply_markup=gen_markup(schedules))
        bot.register_next_step_handler(message, group_schedule, schedules=schedules)
    else:
        groups = [x[1] for x in manager.get_groups()]
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É', reply_markup=gen_markup(groups))
        bot.register_next_step_handler(message, set_group, schedule_name=schedule_name, groups=groups)

def set_group(message, schedule_name, groups):
    group = message.text
    if message.text == cancel_button:
        cansel(message)
        return
        
    if group not in groups:
        bot.send_message(message.chat.id, '–í–∏–¥–∏–º–æ, –≤—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!) –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É', reply_markup=gen_markup(groups))
        bot.register_next_step_handler(message, set_group, schedule_name=schedule_name, groups=groups)
        return
    manager.insert_group(schedule_name, group )
    bot.send_message(message.chat.id, f'–ì—Ä—É–ø–ø–∞ {group} –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é {schedule_name}')


@bot.message_handler(commands=['schedules'])
def get_schedules(message):
    schedules = manager.get_schedules
    if schedules:
        text = "\n".join([f"Schedule name:{x[2]} \nLink:{x[4]}\n" for x in schedules])
        bot.send_message(message.chat.id, text, reply_markup=gen_inline_markup([x[2] for x in schedules]))
    else:
        no_schedules(message)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    schedule_name = call.data
    info_schedule(call.message, schedule_name)


@bot.message_handler(commands=['delete'])
def delete_handler(message):
    schedules = manager.get_schedules
    if schedules:
        text = "\n".join([f"Schedule name:{x[2]} \nLink:{x[4]}\n" for x in schedules])
        schedules = [x[2] for x in schedules]
        bot.send_message(message.chat.id, text, reply_markup=gen_markup(schedules))
        bot.register_next_step_handler(message, delete_schedule, schedules=schedules)
    else:
        no_schedules(message)

def delete_schedule(message, schedules):
    schedule = message.text

    if message.text == cancel_button:
        cansel(message)
        return
    if schedule not in schedules:
        bot.send_message(message.chat.id, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–∞–∫–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç', reply_markup=gen_markup(schedules))
        bot.register_next_step_handler(message, delete_schedule, schedules=schedules)
        return
    schedule_id = manager.get_schedule_id(schedule)
    manager.delete_schedule(schedule_id)
    bot.send_message(message.chat.id, f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {schedule} —É–¥–∞–ª–µ–Ω–æ!')


@bot.message_handler(commands=['update_schedules'])
def update_schedule(message):
    schedules = manager.get_schedules
    if schedules:
        schedules = [x[2] for x in schedules]
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", reply_markup=gen_markup(schedules))
        bot.register_next_step_handler(message, update_schedule_step_2, schedules=schedules )
    else:
        no_schedules(message)

def update_schedule_step_2(message, schedules):
    schedule_name = message.text
    if message.text == cancel_button:
        cansel(message)
        return
    if schedule_name not in schedules:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!) –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—â–µ —Ä–∞–∑:", reply_markup=gen_markup(schedules))
        bot.register_next_step_handler(message, update_schedule_step_2, schedules=schedules )
        return
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏", reply_markup=gen_markup(attributes_of_schedules.keys()))
    bot.register_next_step_handler(message, update_schedule_step_3, schedule_name=schedule_name)

def update_schedule_step_3(message, schedule_name):
    attribute = message.text
    reply_markup = None 
    if message.text == cancel_button:
        cansel(message)
        return
    if attribute not in attributes_of_schedules.keys():
        bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –æ—à–∏–±—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!", reply_markup=gen_markup(attributes_of_schedules.keys()))
        bot.register_next_step_handler(message, update_schedule_step_3, schedule_name=schedule_name)
        return
    elif attribute == "–°—Ç–∞—Ç—É—Å":
        rows = manager.get_statuses()
        reply_markup=gen_markup([x[0] for x in rows])
    bot.send_message(message.chat.id, attributes_of_schedules[attribute][0], reply_markup = reply_markup)
    bot.register_next_step_handler(message, update_schedule_step_4, schedule_name=schedule_name, attribute=attributes_of_schedules[attribute][1])

def update_schedule_step_4(message, schedule_name, attribute): 
    update_info = message.text
    if attribute== "status_id":
        rows = manager.get_statuses()
        if update_info in [x[0] for x in rows]:
            update_info = manager.get_status_id(update_info)
        elif update_info == cancel_button:
            cansel(message)
        else:
            bot.send_message(message.chat.id, "–ë—ã–ª –≤—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!)", reply_markup=gen_markup([x[0] for x in rows]))
            bot.register_next_step_handler(message, update_schedule_step_4, schedule_name=schedule_name, attribute=attribute)
            return
    data = (update_info, schedule_name)
    manager.update_schedules(attribute, data)
    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ! –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã!)")


@bot.message_handler(func=lambda message: True)
def text_handler(message):
    schedules =[ x[2] for x in manager.get_schedules]
    schedule = message.text
    if schedule in schedules:
        info_schedule(message, schedule)
        return
    bot.reply_to(message, "–í–∞–º  –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?")
    info(message)

    
if __name__ == '__main__':
    manager = DB_Manager(DATABASE)
    bot.infinity_polling()